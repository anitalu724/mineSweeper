{"version":3,"sources":["components/Cell.js","components/Modal.js","components/Dashboard.js","util/randomFixSeed.js","util/createBoard.js","components/Board.js","util/reveal.js","components/HomePage.js","containers/MineSweeper.js","App.js","index.js"],"names":["Cell","_ref","rowIdx","colIdx","detail","updateFlag","revealCell","cellStyle","background","revealed","value","mineCheckPattern","x","y","checkPattern","color","numColorCode","border","ID","toString","react_default","a","createElement","onContextMenu","e","onClick","style","className","id","flagged","num","Modal","restartGame","backToHome","win","_useState","useState","_useState2","Object","slicedToArray","render","setRender","useEffect","setTimeout","opacity","timeIntervalId","Dashboard","remainFlagNum","gameOver","sendTime","time","setTime","_useState3","_useState4","sTime","setSTime","clearInterval","randomFixSeed","require","seedrandom","randomNum","min","arguments","length","undefined","max","Math","floor","Board","boardSize","mineNum","board","setBoard","nonMineCount","setNonMineCount","_useState5","_useState6","mineLocations","setMineLocations","_useState7","_useState8","setGameOver","_useState9","_useState10","setRemainFlagNum","_useState11","_useState12","setWin","freshBoard","newBoard","subCol","push","mineCount","r","c","createBoard","preventDefault","JSON","parse","stringify","newFlagNum","i","newRevealedBoard","newNonMinesCount","console","log","flipped","single","pop","Modal_Modal","Dashboard_Dashboard","map","singleRow","index1","Id","display","key","singleBlock","index2","Cell_Cell","HomePage","startGameOnClick","mineNumOnChange","boardSizeOnChange","showPanel","setShowPanel","error","setError","checkError","idx","MINENUM","BOARDSIZE","type","defaultValue","step","onChange","_ref2","target","_ref3","MineSweeper","startGame","setStartGame","setMineNum","setBoardSize","components_Board","components_HomePage","App","react_router_dom","react_router","path","src_containers_MineSweeper","ReactDOM","StrictMode","src_App_0","document","getElementById"],"mappings":"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","file":"static/js/main.c60f4850.chunk.js","sourcesContent":["/****************************************************************************\n  FileName      [ Cell.js ]\n  PackageName   [ src/components ]\n  Author        [ Cheng-Hua Lu, Chin-Yi Cheng ]\n  Synopsis      [ This file generates a single cell. ]\n  Copyright     [ 2021 10 ]\n****************************************************************************/\n\nimport React from \"react\";\nimport \"./css/Cell.css\"\n\n// Nothing to do with this file.\n// The input 'detail' of Cell is one single cell which have properties of x, y, value, flagged and revealed.\nexport default function Cell({rowIdx, colIdx, detail, updateFlag, revealCell}){\n    const cellStyle = {\n        background: detail.revealed ? \n            detail.value === '💣' ? '#880000' : mineCheckPattern(detail.x, detail.y) : checkPattern(detail.x, detail.y),\n        color: numColorCode(detail.value),\n        border: detail.revealed ? \"2px inset darkgrey\" : \"2px outset white\",\n    }\n    const ID = rowIdx.toString() +'-'+ colIdx.toString()\n    return (\n            <div \n                onContextMenu = {(e) => updateFlag(e, detail.x, detail.y) }\n                onClick = {() => revealCell(detail.x, detail.y)}\n                style = {cellStyle}\n                className = 'cell'\n                id = {ID}\n            >\n                {!detail.revealed && detail.flagged ? \"🚩\" : detail.revealed && detail.value !== 0 ? (detail.value === '💣' ? '💣' : detail.value) : ''}\n            </div>\n        \n    );\n}\n\n\n\nconst mineCheckPattern = (x, y) => {\n    if(x % 2 === 0 && y % 2 === 0) return '#c0c0c0';\n    else if (x % 2 === 0 && y % 2 !== 0) return '#bbbbbb';\n    else if (x % 2 !== 0 && y % 2 === 0)  return '#bbbbbb';\n    else return '#c0c0c0';\n}\n\nconst checkPattern = (x, y) => {\n    if(x % 2 === 0 && y % 2 === 0) return '#dddddd';\n    else if (x % 2 === 0 && y % 2 !== 0) return '#d0d0d0';\n    else if (x % 2 !== 0 && y % 2 === 0)  return '#d0d0d0';\n    else return '#dddddd';\n}\n\nconst numColorCode = (num) => {\n    if(num === 1) return '#0307de';\n    else if(num === 2) return '#15760f';\n    else if(num === 3) return '#dc1410';\n    else if(num === 4) return '#02087e';\n    else if(num === 5) return '#630501';\n    else if(num === 6) return '#ec596c';\n    else if(num === 7) return '#edf451';\n    else if(num === 8) return '#56dddc';\n}\n","/****************************************************************************\n  FileName      [ Modal.js ]\n  PackageName   [ src/components ]\n  Author        [ Cheng-Hua Lu, Chin-Yi Cheng ]\n  Synopsis      [ This file generates the Modal component. ]\n  Copyright     [ 2021 10 ]\n****************************************************************************/\n\nimport React, { useEffect, useState } from \"react\";\nimport './css/Modal.css'\n\nexport default function Modal({restartGame, backToHome, win}){\n    const [render, setRender] = useState(false);\n    useEffect(() => {\n        setTimeout(() => {\n            setRender(true);\n        }, 1000);\n    }, []);\n\n    return (\n        /* -- TODO 6 -- */\n        /* Useful Hint: style = {{opacity: 1 or 0 }} */\n        <div className = 'modal' style = {{ opacity: render ? 1 : 0 }}>\n            <div className = 'modalWrapper'></div>\n            <div className = 'modalContent'>\n                {win ? <div className = 'modalResult'>WIN</div> : <div className = 'modalResult'>Game Over</div>}\n                <div className='modalBtnWrapper'>\n                    {win ? <div className = 'modalBtn' onClick = {() => restartGame()}>New Game</div> : <div className = 'modalBtn' onClick = {() => restartGame()}>Try Again</div>}\n                    <div className = 'modalBtn' onClick = {() => backToHome()}>Back to Home</div>\n                </div>\n            </div>\n            <div className = 'modalWrapper'></div>\n        </div>\n    );\n}","/****************************************************************************\n  FileName      [ Dashnoard.js ]\n  PackageName   [ src/components ]\n  Author        [ Cheng-Hua Lu, Chin-Yi Cheng ]\n  Synopsis      [ This file generates the Dashboard. ]\n  Copyright     [ 2021 10 ]\n****************************************************************************/\n\nimport React, { useEffect, useState } from 'react';\nimport \"./css/Dashboard.css\"\nlet timeIntervalId;\n\nexport default function Dashboard({remainFlagNum, gameOver, sendTime}){\n    let [time, setTime] = useState(0);\n    let [sTime, setSTime] = useState(0);\n\n    {/* -- TODO 8 -- */}\n    {/* Useful Hint: Try to understand the difference between time and sTime. */}\n\n    useEffect(() => {\n      if (time > 0 && gameOver) {\n        setSTime(time);\n        setTime(0);\n      }\n    }, [gameOver, time]);\n\n    useEffect(() => {\n      const incrementTime = () => {\n        let newTime = time + 1;\n        setTime(newTime);\n      };\n      timeIntervalId = setTimeout(() => {\n        incrementTime();\n      }, 1000);\n      if (gameOver) clearInterval(timeIntervalId);\n      \n    }, [time, setTime, gameOver, sendTime]);\n\n\n    return (\n        <div className = \"dashBoard\" >\n            <div id = 'dashBoard_col1' >\n                <div className = 'dashBoard_col'>\n                    <p className = 'icon'>🚩</p>\n                    {remainFlagNum}\n                </div>\n            </div>\n            <div id = 'dashBoard_col2' >\n                <div className = 'dashBoard_col'>\n                    <p className = 'icon'>⏰</p>\n                    {gameOver ? sTime : time}\n                </div>\n            </div>\n        </div>\n    );\n}","var seedrandom = require('seedrandom');\nconst randomFixSeed = seedrandom('Over my dead body');\n\nexport default function randomNum(min = 0, max){\n    return Math.floor(randomFixSeed() * (max - min + 1) + min);\n}\n","import randomNum from \"./randomFixSeed\";\n\nexport default (boardSize, mineNum) => {\n    let board = [];\n    let mineLocations = [];\n\n    // Print Board function (For testing)\n    const printBoard = () => {\n        console.log(\"Current Board\")\n        for(let x = 0; x < boardSize; x++){\n            console.log(board[x].map((x) => {\n                return(x.value !=='💣' ? x.value.toString()+\" \" : x.value)\n            }))\n        }\n    }\n\n    // Create a blank board\n    for(let x = 0; x < boardSize; x++){\n        let subCol = [];\n        for(let y = 0; y < boardSize; y++){\n            subCol.push({\n                value: 0,                   // To store the number of mines around the cell.\n                revealed: false,            // To store if the cell is revealed.\n                x: x,                       // To store the x coordinate (the column index) of the cell.\n                y: y,                       // To store the y coordinate (the row index) of the cell.\n                flagged: false,             // To store if the cell is flagged.\n            });\n        }\n        board.push(subCol);\n    }\n    \n    // Random bombs locations\n    let mineCount = 0;\n    while(mineCount < mineNum){\n        let x = randomNum(0, boardSize - 1);\n        let y = randomNum(0, boardSize - 1);\n\n        if(board[x][y].value === 0){            // Check this location has not been located a mine.\n            board[x][y].value = '💣';           // Change the value of the cell to '💣'\n            mineLocations.push([x, y]);\n            mineCount++;\n        }\n    }\n\n    {/* -- TODO 3 -- */}\n    {/* Useful Hints: Calculate and update the value of each cell in the board. The value means the number of mines adjacent to the cell. */}\n    {/* Reminder: Some cells in the board do not have \"Top\" position, some do not have \"Top-Right\" position .... */}\n    {/* Warning: The value of any cell will not be bigger than 8 logically. */}\n    {/* Testing: printBoard() */}\n\n\n    // Add Numbers\n    for(let r = 0; r < boardSize; r++){\n        for(let c = 0; c < boardSize; c++){\n            if (board[r][c].value === '💣') continue;\n            // Top\n            if (r > 0 && board[r - 1][c].value === '💣') board[r][c].value++;\n            // Top Right\n            if (r > 0 && c < boardSize - 1 && board[r - 1][c + 1].value === '💣') board[r][c].value++;\n            // Right\n            if (c < boardSize - 1 && board[r][c + 1].value === '💣') board[r][c].value++;\n            // Bottom Right\n            if (r < boardSize - 1 && c < boardSize - 1 && board[r + 1][c + 1].value === '💣') board[r][c].value++;\n            // Bottom\n            if (r < boardSize - 1 && board[r + 1][c].value === '💣') board[r][c].value++;\n            // Bottom Left\n            if (r < boardSize -1 && c > 0 && board[r + 1][c - 1].value === '💣') board[r][c].value++;\n            // Left\n            if (c > 0 && board[r][c - 1].value === '💣') board[r][c].value++;\n            // Top Left\n            if (r > 0 && c > 0 && board[r - 1][c -1].value === '💣') board[r][c].value++;\n\n        }\n    }\n    return { board, mineLocations };\n};","/****************************************************************************\n  FileName      [ Board.js ]\n  PackageName   [ src/components ]\n  Author        [ Cheng-Hua Lu, Chin-Yi Cheng ]\n  Synopsis      [ This file generates the Board. ]\n  Copyright     [ 2021 10 ]\n****************************************************************************/\n\nimport React, { useEffect, useState } from 'react';\nimport Cell from './Cell';\nimport Modal from './Modal';\nimport Dashboard from './Dashboard';\nimport createBoard from '../util/createBoard';\nimport { revealed } from '../util/reveal';\nimport './css/Board.css'\n\n\nconst Board = ({ boardSize, mineNum, backToHome }) => {\n    const [board, setBoard] = useState([]);                     // An 2-dimentional array. It is used to store the board.\n    const [nonMineCount, setNonMineCount] = useState(0);        // An integer variable to store the number of cells whose value are not '💣'.\n    const [mineLocations, setMineLocations] = useState([]);     // An array to store all the coordinate of '💣'.\n    const [gameOver, setGameOver] = useState(false);            // A boolean variable. If true, means you lose the game (Game over).\n    const [remainFlagNum, setRemainFlagNum] = useState(0);      // An integer variable to store the number of remain flags.\n    const [win, setWin] = useState(false);                      // A boolean variable. If true, means that you win the game.\n\n    useEffect(() => {\n        // Calling the function\n        freshBoard();\n    }, []);\n\n    // Creating a board\n    const freshBoard = () => {\n        {/* -- TODO 4-1 -- */}\n        {/* Useful Hint: createBoard(...) */}\n        const newBoard = createBoard(boardSize, mineNum);\n        setNonMineCount(boardSize * boardSize - mineNum);\n        setRemainFlagNum(mineNum);\n        setMineLocations(newBoard.mineLocations);\n        setBoard(newBoard.board);\n    }\n\n    const restartGame = () => {\n        {/* -- TODO 4-1 -- */}\n        {/* Useful Hint: freshBoard() */}\n        freshBoard();\n        setGameOver(false);\n        setWin(false);\n    }\n\n    // On Right Click / Flag Cell\n    const updateFlag = (e, x, y) => {\n        // To not have a dropdown on right click\n        e.preventDefault();\n        // Deep copy of a state\n        {/* -- TODO 4-3 -- */}\n        {/* Useful Hint: A cell is going to be flagged. 'x' and 'y' are the xy-coordinate of the cell. */}\n        {/* Reminder: If the cell is already flagged, you should unflagged it. Also remember to update the board and the remainFlagNum. */}\n        {/* Reminder: The cell can be flagged only when it is not revealed. */}\n        let newBoard = JSON.parse(JSON.stringify(board));\n        let newFlagNum = remainFlagNum;\n        if(newBoard[x][y].revealed === true) return;\n        if(newBoard[x][y].flagged !== true &&  newBoard[x][y].revealed !== true){\n            newBoard[x][y].flagged = true;\n            newFlagNum--;\n        }\n        else{\n            newBoard[x][y].flagged = false;\n            newFlagNum++;\n        }\n        setRemainFlagNum(newFlagNum);\n        setBoard(newBoard);\n    };\n\n    const revealCell = (x, y) => {\n        {/* -- TODO 4-4 -- */}\n        {/* Reveal the cell */}\n        {/* Useful Hint: The function in reveal.js may be useful. You should consider if the cell you want to reveal is a location of mines or not. */}\n        {/* Reminder: Also remember to handle the condition that after you reveal this cell then you win the game. */}\n        if(board[x][y].revealed || gameOver || board[x][y].flagged) return;\n        \n        let newBoard = JSON.parse(JSON.stringify(board));\n        // Hit the mine!!\n        if(newBoard[x][y].value === '💣'){\n            for(let i = 0; i < mineLocations.length; i++){\n                if(!newBoard[mineLocations[i][0]][mineLocations[i][1]].flagged)\n                    newBoard[mineLocations[i][0]][mineLocations[i][1]].revealed = true;\n            }\n            setBoard(newBoard);\n            setGameOver(true);\n        } \n        // Reveal the number cell\n        else{\n            let newRevealedBoard = revealed(newBoard, x, y, nonMineCount);\n            setBoard(newRevealedBoard.board);\n            setNonMineCount(newRevealedBoard.newNonMinesCount);\n            if(newRevealedBoard.newNonMinesCount === 0){\n                console.log(\"win\")\n                setGameOver(true);\n                setWin(true);\n            }\n        }\n    }\n    return(\n        <div className = 'boardPage' >\n            <div className = 'boardWrapper' >\n            {/* <h1>This is the board Page!</h1>  This line of code is just for testing. Please delete it if you finish this function. */}\n            \n            {/* -- TODO 4-2 -- */}\n            {/* Useful Hint: The board is composed of BOARDSIZE*BOARDSIZE of Cell (2-dimention). So, nested 'map' is needed to implement the board.  */}\n            {/* Reminder: Remember to use the component <Cell> and <Dashboard>. See Cell.js and Dashboard.js for detailed information. */}\n            \n            \n            {gameOver && <Modal restartGame = {restartGame} backToHome = {backToHome} win= {win}/>}\n                <div className = 'boardContainer'>\n                    <Dashboard remainFlagNum = {remainFlagNum} gameOver = {gameOver}/>\n                    {\n                        board.map((singleRow, index1) => {\n                            const Id = 'row'+index1.toString() \n                            return (\n                                <div style = {{display: \"flex\"}} key = {index1} id={Id}>\n                                    {singleRow.map((singleBlock, index2) => {\n                                        return (\n                                            <Cell rowIdx = {index1} colIdx = {index2} detail = {singleBlock} updateFlag = {updateFlag} revealCell = {revealCell} key = {index2}/>\n                                        );\n                                    })}\n                                </div>\n                            );\n                        })\n                    }\n                </div>\n            </div>\n        </div>\n    ); \n\n    \n\n}\n\nexport default Board","export const revealed = (board, x, y, newNonMinesCount) => {\n    {/* -- TODO 5-1 -- */}\n    {/* Useful Hint: If the cell is already revealed, do nothing. */}\n    {/* Useful Hint: If the value of the cell is not 0, only show the cell value. */}\n\n    {/* -- TODO 5-2 -- */}\n    {/* Useful Hint: If the value of the cell is 0, we should try to find the value of adjacent cells until the value we found is not 0. */}\n    {/* Useful Hint: The input variables 'newNonMinesCount' and 'board' may be changed in this function. */}\n    \n    console.log(board[x][y]);\n    if (board[x][y].revealed) return;\n\n    let flipped = [];\n    flipped.push(board[x][y]);\n    while (flipped.length !== 0){\n        let single = flipped.pop();\n        if (!single.revealed){\n            newNonMinesCount--;\n            single.revealed = true;\n        }\n        if(single.value !== 0) break;\n\n        // Bottom - Right\n        if(single.x > 0 && single.y > 0 && board[single.x - 1][single.y - 1].value === 0 && !board[single.x - 1][single.y - 1].revealed)\n            flipped.push(board[single.x - 1][single.y - 1]);\n        // Bottom - Left\n        if(single.x < board.length - 1 && single.y < board[0].length - 1 && board[single.x + 1][single.y + 1].value === 0 && !board[single.x + 1][single.y + 1].revealed)\n            flipped.push(board[single.x + 1][single.y + 1]);\n        // Top - Left\n        if(single.x < board.length - 1 && single.y > 0 && board[single.x + 1][single.y - 1].value === 0 && !board[single.x + 1][single.y - 1].revealed)\n            flipped.push(board[single.x + 1][single.y - 1]);\n        // Top - Right\n        if(single.x > 0 && single.y < board[0].length - 1 && board[single.x - 1][single.y + 1].value === 0 && !board[single.x - 1][single.y + 1].revealed)\n            flipped.push(board[single.x - 1][single.y + 1]);\n        \n        // Single ones\n\n        // Top\n        if (single.x > 0 && board[single.x - 1][single.y].value === 0 && !board[single.x - 1][single.y].revealed)\n            flipped.push(board[single.x - 1][single.y]);\n        // Bottom\n        if (single.x < board.length - 1 && board[single.x + 1][single.y].value === 0 && !board[single.x + 1][single.y].revealed)\n            flipped.push(board[single.x + 1][single.y]);\n        // Left\n        if (single.y > 0 && board[single.x][single.y - 1].value === 0 && !board[single.x][single.y - 1].revealed)\n            flipped.push(board[single.x][single.y - 1]);\n        // Right\n        if (single.y < board[0].length - 1  && board[single.x][single.y + 1].value === 0 && !board[single.x][single.y + 1].revealed)\n            flipped.push(board[single.x][single.y + 1]);\n\n        // Start reveal items\n        \n        // Top left\n        if(single.x > 0 && single.y > 0 && !board[single.x - 1][single.y - 1].revealed){\n            board[single.x - 1][single.y - 1].revealed = true;\n            newNonMinesCount--;\n        }\n        // Left\n        if(single.y > 0 && !board[single.x][single.y - 1].revealed){\n            board[single.x][single.y - 1].revealed = true;\n            newNonMinesCount--;\n        }\n        // Bottom left\n        if(single.x < board.length - 1 && single.y > 0 && !board[single.x + 1][single.y - 1].revealed){\n            board[single.x + 1][single.y - 1].revealed = true;\n            newNonMinesCount--;\n        }\n        // Bottom\n        if(single.x < board.length - 1 && !board[single.x + 1][single.y].revealed){\n            board[single.x + 1][single.y].revealed = true;\n            newNonMinesCount--;\n        }\n        // Bottom right\n        if(single.x < board.length - 1 && single.y < board[0].length - 1 && !board[single.x + 1][single.y + 1].revealed){\n            board[single.x + 1][single.y + 1].revealed = true;\n            newNonMinesCount--;\n        }\n        // Right\n        if(single.y < board[0].length - 1 && !board[single.x][single.y + 1].revealed){\n            board[single.x][single.y + 1].revealed = true;\n            newNonMinesCount--;\n        }\n        // Top right\n        if(single.x > 0 && single.y < board[0].length - 1 && !board[single.x - 1][single.y + 1].revealed){\n            board[single.x - 1][single.y + 1].revealed = true;\n            newNonMinesCount--;\n        }\n        // Top\n        if(single.x > 0 && !board[single.x - 1][single.y].revealed){\n            board[single.x - 1][single.y].revealed = true;\n            newNonMinesCount--;\n        }\n    }\n    return {board, newNonMinesCount};\n};\n","/****************************************************************************\n  FileName      [ HomePage.js ]\n  PackageName   [ src/components ]\n  Author        [ Cheng-Hua Lu, Chin-Yi Cheng ]\n  Synopsis      [ This file generates the Home page.  ]\n  Copyright     [ 2021 10 ]\n****************************************************************************/\n\nimport React, { useState } from 'react';\nimport './css/HomePage.css';\n\n{/* -- TODO 2 -- */}\nconst HomePage = ({startGameOnClick, mineNumOnChange, boardSizeOnChange, mineNum, boardSize /* -- something more... -- */}) => {\n    const [showPanel, setShowPanel] = useState(false);      // A boolean variable. If true, the controlPanel will show.\n    const [error, setError] = useState(false);              // A boolean variable. If true, means that the numbers of mines and the board size are invalid to build a game.\n\n    {/* Some functions may be added here! */}\n    const diffOnClick = () => {\n        showPanel ? setShowPanel(false) : setShowPanel(true);\n    }\n\n    const startOnClick = () => {\n      console.log(\"startOnClick\")\n      if(!error) startGameOnClick();\n      else console.log(\"Error value: cannot start game!\");\n    }\n\n    const checkError = (idx, num) => {\n      let MINENUM = (idx === 0) ? num : mineNum;\n      let BOARDSIZE = (idx === 1) ? num : boardSize;\n      console.log(MINENUM, BOARDSIZE);\n      if( BOARDSIZE * BOARDSIZE < MINENUM ) setError(true);\n      else setError(false);\n    }\n\n    return(\n      <div className = 'HomeWrapper'>\n          <p className = 'title'>MineSweeper</p>\n            {/* -- TODO 2 -- */}\n          \n            {/* -- TODO 7 -- */}\n            {/* Useful Hint: <input type = 'range' min = '...' max = '...' defaultValue = '...'> */}\n            {/* Useful Hint: Error color: '#880000', default text color: '#0f0f4b', invisible color: 'transparent' */}\n            {/* Reminder: The defaultValue of 'mineNum' is 10, and the defaultValue of 'boardSize' is 8. */}\n            <button className = 'btn' onClick = {startOnClick}>Start Game</button>\n                <div className = 'controlContainer'>\n                    <button className = 'btn' onClick = {diffOnClick}>Difficulty Adjustment</button>\n                    {showPanel ? \n                        <div className='controlWrapper'> \n                            <div className ='error' style = {{ color: (error) ? '#880000':'transparent'}}>ERROR: Mines number and board size are invalid!</div>\n                          <div className = \"controlPanel\">\n                            <div className = \"controlCol\">\n                                <p className = 'controlTitle'>Mines Number</p>\n                                <input  type='range' min='1' max='50' defaultValue='10'   step='1' onChange = {({ target: { value: num } }) => {mineNumOnChange(num);  checkError(0, num);}}/>\n                                <p className = 'controlNum' style = {{color: (error) ? '#880000' : '#0f0f4b'}}>{mineNum}</p>\n                            </div>\n                            <div className = \"controlCol\">\n                                <p className = 'controlTitle'>Board Size (n×n)</p>\n                                <input type='range' min='1' max='20' defaultValue='8'  step='1' onChange = {({ target: { value: num } }) => {boardSizeOnChange(num);  checkError(1, num);}}/> \n                                <p className = 'controlNum' style = {{color: (error) ? '#880000' : '#0f0f4b'}}>{boardSize}</p>\n                            </div>\n                          </div>\n                        </div> \n                        : \n                        <div></div>\n                    }\n                </div>\n        </div>\n    );\n\n}\nexport default HomePage;   ","/****************************************************************************\n  FileName      [ MineSweeper.js ]\n  PackageName   [ src/containers ]\n  Author        [ Cheng-Hua Lu, Chin-Yi Cheng ]\n  Synopsis      [ The control and main page of MineSweeper. ]\n  Copyright     [ 2021 10 ]\n****************************************************************************/\n\nimport React, { useState } from 'react';\nimport './MineSweeper.css';\nimport Board from '../components/Board'\nimport HomePage from '../components/HomePage'\n\nconst MineSweeper = () => {\n    const [startGame, setStartGame] = useState(false);      // A boolean variable. If true, show the Board, else show the HomePage.\n    const [mineNum, setMineNum] = useState(10);             // A integer variable to store the number of mines in the game. The default value is 10.\n    const [boardSize, setBoardSize] = useState(8);          // A integer variable to store the board size in the game. The default value is 8.\n    \n    {/* -- TODO 1 -- */}\n    {/* Useful Hint: The four functions below only need to fill up with those three hook functions above. */}\n    const startGameOnClick = () => {\n        setStartGame(true);\n    }\n    const mineNumOnChange = (value) => {\n        setMineNum(value);\n    }\n    const boardSizeOnChange = (value) => {\n        setBoardSize(value);\n    }\n    const backToHomeOnClick = () => {\n        setStartGame(false);\n        setMineNum(10);\n        setBoardSize(8);\n    }\n\n    return( \n        <div className='mineSweeper'>  \n            {/* -- TODO 1 -- */} \n            {/* Useful Hint: If ... <HomePage startGameOnClick = {startGameOnClick} .../> else <Board .../> */}\n            {/* Reminder: You can refer to the structure file in p.6 of Hack1.pdf. */}\n             \n            {startGame ? \n                <Board boardSize = {boardSize} mineNum = {mineNum} backToHome = {backToHomeOnClick}/> \n                :\n                <HomePage startGameOnClick = {startGameOnClick} mineNumOnChange = {mineNumOnChange} boardSizeOnChange = {boardSizeOnChange} mineNum = {mineNum} boardSize = {boardSize}/>\n            } \n        </div>\n    );\n}\nexport default MineSweeper;","import React from 'react';\nimport { BrowserRouter as Router, Route, Switch } from 'react-router-dom';\nimport './App.css';\nimport MineSweeper from './containers/MineSweeper';\n\nconst App = () => {\n  return (\n    <Router>\n      <div className = 'App'>\n      <Switch>\n        <Route path='/'>\n          <MineSweeper/>\n        </Route>\n      </Switch>\n      </div>\n    </Router>\n    \n  );\n}\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\n\nimport App from './App';\n\nReactDOM.render(\n    <React.StrictMode>\n      <App />\n    </React.StrictMode>,\n  \n  document.getElementById('root')\n);\n\n\n"],"sourceRoot":""}