{"ast":null,"code":"var _jsxFileName = \"/Users/anitalu/Desktop/web/minesweeper/src/components/Board.js\",\n    _s = $RefreshSig$();\n\nimport React, { useEffect, useState } from 'react';\nimport createBoard from '../util/createBoard';\nimport Cell from './Cell';\nimport { revealed } from '../util/reveal';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nconst Board = () => {\n  _s();\n\n  const [grid, setGrid] = useState([]);\n  const [nonMineCount, setNonMineCount] = useState(0);\n  useEffect(() => {\n    // Creating a board\n    function freshBoard() {\n      const newBoard = createBoard(10, 10, 15);\n      setNonMineCount(10 * 10 - 15);\n      setGrid(newBoard.board);\n    } // Calling the function\n\n\n    freshBoard();\n  }, []); // On Right Click / Flag Cell\n\n  const updateFlag = (e, x, y) => {\n    // To not have a dropdown on right click\n    e.preventDefault(); // Deep copy of a state\n\n    let newGrid = JSON.parse(JSON.stringify(grid));\n    console.log(newGrid[x][y]);\n    newGrid[x][y].flagged = true;\n    setGrid(newGrid);\n  }; // Reveal Cell\n\n\n  const revealCell = (x, y) => {\n    let newGrid = JSON.parse(JSON.stringify(grid));\n    if (newGrid[x][y].value === \"X\") alert(\"mine find\");else {\n      let newRevealedBoard = revealed(newGrid, x, y);\n      setGrid(newRevealedBoard.arr);\n    }\n  }; // if (!grid.board){\n  //     return <div>Loading...</div>;\n  // }\n\n\n  return grid.map((singleRow, index1) => {\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      style: {\n        display: \"flex\"\n      },\n      children: singleRow.map((singleBlock, index2) => {\n        return /*#__PURE__*/_jsxDEV(Cell, {\n          detail: singleBlock,\n          updateFlag: updateFlag,\n          revealCell: revealCell\n        }, index2, false, {\n          fileName: _jsxFileName,\n          lineNumber: 53,\n          columnNumber: 25\n        }, this);\n      })\n    }, index1, false, {\n      fileName: _jsxFileName,\n      lineNumber: 50,\n      columnNumber: 13\n    }, this);\n  });\n};\n\n_s(Board, \"hXlLLA+/BvFTyp8xA1ra6N9+4dA=\");\n\n_c = Board;\nexport default Board;\n\nvar _c;\n\n$RefreshReg$(_c, \"Board\");","map":{"version":3,"sources":["/Users/anitalu/Desktop/web/minesweeper/src/components/Board.js"],"names":["React","useEffect","useState","createBoard","Cell","revealed","Board","grid","setGrid","nonMineCount","setNonMineCount","freshBoard","newBoard","board","updateFlag","e","x","y","preventDefault","newGrid","JSON","parse","stringify","console","log","flagged","revealCell","value","alert","newRevealedBoard","arr","map","singleRow","index1","display","singleBlock","index2"],"mappings":";;;AAAA,OAAOA,KAAP,IAAgBC,SAAhB,EAA2BC,QAA3B,QAA2C,OAA3C;AACA,OAAOC,WAAP,MAAwB,qBAAxB;AACA,OAAOC,IAAP,MAAiB,QAAjB;AACA,SAASC,QAAT,QAAyB,gBAAzB;;;AAEA,MAAMC,KAAK,GAAG,MAAM;AAAA;;AAChB,QAAM,CAACC,IAAD,EAAOC,OAAP,IAAkBN,QAAQ,CAAC,EAAD,CAAhC;AACA,QAAM,CAACO,YAAD,EAAeC,eAAf,IAAkCR,QAAQ,CAAC,CAAD,CAAhD;AAEAD,EAAAA,SAAS,CAAC,MAAM;AACZ;AACA,aAASU,UAAT,GAAqB;AACjB,YAAMC,QAAQ,GAAGT,WAAW,CAAC,EAAD,EAAK,EAAL,EAAS,EAAT,CAA5B;AACAO,MAAAA,eAAe,CAAC,KAAK,EAAL,GAAU,EAAX,CAAf;AACAF,MAAAA,OAAO,CAACI,QAAQ,CAACC,KAAV,CAAP;AACH,KANW,CAOZ;;;AACAF,IAAAA,UAAU;AACb,GATQ,EASN,EATM,CAAT,CAJgB,CAehB;;AACA,QAAMG,UAAU,GAAG,CAACC,CAAD,EAAIC,CAAJ,EAAOC,CAAP,KAAa;AAC5B;AACAF,IAAAA,CAAC,CAACG,cAAF,GAF4B,CAG5B;;AACA,QAAIC,OAAO,GAAGC,IAAI,CAACC,KAAL,CAAWD,IAAI,CAACE,SAAL,CAAef,IAAf,CAAX,CAAd;AACAgB,IAAAA,OAAO,CAACC,GAAR,CAAYL,OAAO,CAACH,CAAD,CAAP,CAAWC,CAAX,CAAZ;AACAE,IAAAA,OAAO,CAACH,CAAD,CAAP,CAAWC,CAAX,EAAcQ,OAAd,GAAwB,IAAxB;AACAjB,IAAAA,OAAO,CAACW,OAAD,CAAP;AACH,GARD,CAhBgB,CA0BhB;;;AACA,QAAMO,UAAU,GAAG,CAACV,CAAD,EAAIC,CAAJ,KAAU;AACzB,QAAIE,OAAO,GAAGC,IAAI,CAACC,KAAL,CAAWD,IAAI,CAACE,SAAL,CAAef,IAAf,CAAX,CAAd;AACA,QAAGY,OAAO,CAACH,CAAD,CAAP,CAAWC,CAAX,EAAcU,KAAd,KAAwB,GAA3B,EAAgCC,KAAK,CAAC,WAAD,CAAL,CAAhC,KACI;AACA,UAAIC,gBAAgB,GAAGxB,QAAQ,CAACc,OAAD,EAAUH,CAAV,EAAaC,CAAb,CAA/B;AACAT,MAAAA,OAAO,CAACqB,gBAAgB,CAACC,GAAlB,CAAP;AACH;AAGJ,GATD,CA3BgB,CAsChB;AACA;AACA;;;AAEA,SAAOvB,IAAI,CAACwB,GAAL,CAAS,CAACC,SAAD,EAAYC,MAAZ,KAAuB;AACnC,wBACI;AAAK,MAAA,KAAK,EAAI;AAACC,QAAAA,OAAO,EAAE;AAAV,OAAd;AAAA,gBACKF,SAAS,CAACD,GAAV,CAAc,CAACI,WAAD,EAAcC,MAAd,KAAyB;AACpC,4BACI,QAAC,IAAD;AAAM,UAAA,MAAM,EAAID,WAAhB;AAA6B,UAAA,UAAU,EAAIrB,UAA3C;AAAuD,UAAA,UAAU,EAAIY;AAArE,WAAwFU,MAAxF;AAAA;AAAA;AAAA;AAAA,gBADJ;AAGH,OAJA;AADL,OAAwCH,MAAxC;AAAA;AAAA;AAAA;AAAA,YADJ;AASH,GAVM,CAAP;AAcH,CAxDD;;GAAM3B,K;;KAAAA,K;AA0DN,eAAeA,KAAf","sourcesContent":["import React, { useEffect, useState } from 'react';\nimport createBoard from '../util/createBoard';\nimport Cell from './Cell';\nimport { revealed } from '../util/reveal';\n\nconst Board = () => {\n    const [grid, setGrid] = useState([]);\n    const [nonMineCount, setNonMineCount] = useState(0);\n\n    useEffect(() => {\n        // Creating a board\n        function freshBoard(){\n            const newBoard = createBoard(10, 10, 15);\n            setNonMineCount(10 * 10 - 15);\n            setGrid(newBoard.board);\n        }\n        // Calling the function\n        freshBoard();\n    }, []);\n\n    // On Right Click / Flag Cell\n    const updateFlag = (e, x, y) => {\n        // To not have a dropdown on right click\n        e.preventDefault();\n        // Deep copy of a state\n        let newGrid = JSON.parse(JSON.stringify(grid));\n        console.log(newGrid[x][y]);\n        newGrid[x][y].flagged = true;\n        setGrid(newGrid);\n    };\n\n    // Reveal Cell\n    const revealCell = (x, y) => {\n        let newGrid = JSON.parse(JSON.stringify(grid));\n        if(newGrid[x][y].value === \"X\") alert(\"mine find\");\n        else{\n            let newRevealedBoard = revealed(newGrid, x, y);\n            setGrid(newRevealedBoard.arr);\n        }\n        \n        \n    }\n\n    // if (!grid.board){\n    //     return <div>Loading...</div>;\n    // }\n\n    return grid.map((singleRow, index1) => {\n        return (\n            <div style = {{display: \"flex\"}} key = {index1}>\n                {singleRow.map((singleBlock, index2) => {\n                    return (\n                        <Cell detail = {singleBlock} updateFlag = {updateFlag} revealCell = {revealCell} key = {index2}/>\n                    );\n                })}\n            </div>\n        );\n    })\n\n    \n\n}\n\nexport default Board"]},"metadata":{},"sourceType":"module"}