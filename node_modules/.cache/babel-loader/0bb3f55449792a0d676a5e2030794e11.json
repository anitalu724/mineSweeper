{"ast":null,"code":"var _jsxFileName = \"/Users/anitalu/Desktop/web/minesweeper/src/components/Board.js\",\n    _s = $RefreshSig$();\n\nimport React, { useEffect, useState } from 'react';\nimport createBoard from '../util/createBoard';\nimport Cell from './Cell';\nimport Modal from './Modal';\nimport { revealed } from '../util/reveal';\nimport \"../App.css\";\nimport Timer from './Timer';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nconst Board = () => {\n  _s();\n\n  const [grid, setGrid] = useState([]);\n  const [nonMineCount, setNonMineCount] = useState(0);\n  const [mineLocations, setMineLocation] = useState([]);\n  const [gameOver, setGameOver] = useState(false);\n  useEffect(() => {\n    // Calling the function\n    freshBoard();\n  }, []); // Creating a board\n\n  const freshBoard = () => {\n    const newBoard = createBoard(10, 10, 15);\n    setNonMineCount(10 * 10 - 15);\n    setMineLocation(newBoard.mineLocation);\n    setGrid(newBoard.board);\n  };\n\n  const restartGame = () => {\n    freshBoard();\n    setGameOver(false);\n  }; // On Right Click / Flag Cell\n\n\n  const updateFlag = (e, x, y) => {\n    // To not have a dropdown on right click\n    e.preventDefault(); // Deep copy of a state\n\n    let newGrid = JSON.parse(JSON.stringify(grid));\n    console.log(newGrid[x][y]);\n    newGrid[x][y].value = 'ðŸš©';\n    newGrid[x][y].revealed = true;\n    newGrid[x][y].flagged = true;\n    setGrid(newGrid);\n  }; // Reveal Cell\n\n\n  const revealCell = (x, y) => {\n    if (grid[x][y].revealed || gameOver) {\n      return;\n    }\n\n    let newGrid = JSON.parse(JSON.stringify(grid));\n\n    if (newGrid[x][y].value === 'ðŸ’£') {\n      for (let i = 0; i < mineLocations.length; i++) {\n        newGrid[mineLocations[i][0]][mineLocations[i][1]].revealed = true;\n      }\n\n      setGrid(newGrid);\n      setGameOver(true);\n    } else {\n      let newRevealedBoard = revealed(newGrid, x, y, nonMineCount);\n      setGrid(newRevealedBoard.arr);\n      setNonMineCount(newRevealedBoard.newNonMinesCount);\n\n      if (newRevealedBoard.newNonMinesCount === 0) {\n        setGameOver(true);\n      }\n    }\n  };\n\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"boardWrapper\",\n    children: [/*#__PURE__*/_jsxDEV(Timer, {}, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 74,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"board\",\n      children: [gameOver && /*#__PURE__*/_jsxDEV(Modal, {\n        restartGame: restartGame\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 76,\n        columnNumber: 30\n      }, this), grid.map((singleRow, index1) => {\n        return /*#__PURE__*/_jsxDEV(\"div\", {\n          style: {\n            display: \"flex\"\n          },\n          children: singleRow.map((singleBlock, index2) => {\n            return /*#__PURE__*/_jsxDEV(Cell, {\n              detail: singleBlock,\n              updateFlag: updateFlag,\n              revealCell: revealCell\n            }, index2, false, {\n              fileName: _jsxFileName,\n              lineNumber: 83,\n              columnNumber: 41\n            }, this);\n          })\n        }, index1, false, {\n          fileName: _jsxFileName,\n          lineNumber: 80,\n          columnNumber: 29\n        }, this);\n      })]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 75,\n      columnNumber: 13\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 73,\n    columnNumber: 9\n  }, this);\n};\n\n_s(Board, \"MlZEXoS29rlT0uFqTkis9Nu9NSc=\");\n\n_c = Board;\nexport default Board;\n\nvar _c;\n\n$RefreshReg$(_c, \"Board\");","map":{"version":3,"sources":["/Users/anitalu/Desktop/web/minesweeper/src/components/Board.js"],"names":["React","useEffect","useState","createBoard","Cell","Modal","revealed","Timer","Board","grid","setGrid","nonMineCount","setNonMineCount","mineLocations","setMineLocation","gameOver","setGameOver","freshBoard","newBoard","mineLocation","board","restartGame","updateFlag","e","x","y","preventDefault","newGrid","JSON","parse","stringify","console","log","value","flagged","revealCell","i","length","newRevealedBoard","arr","newNonMinesCount","map","singleRow","index1","display","singleBlock","index2"],"mappings":"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","sourcesContent":["import React, { useEffect, useState } from 'react';\nimport createBoard from '../util/createBoard';\nimport Cell from './Cell';\nimport Modal from './Modal';\nimport { revealed } from '../util/reveal';\nimport \"../App.css\"\nimport Timer from './Timer';\n\nconst Board = () => {\n    const [grid, setGrid] = useState([]);\n    const [nonMineCount, setNonMineCount] = useState(0);\n    const [mineLocations, setMineLocation] = useState([]);\n    const [gameOver, setGameOver] = useState(false);\n\n    useEffect(() => {\n        \n        // Calling the function\n        freshBoard();\n    }, []);\n\n    // Creating a board\n    const freshBoard = () => {\n        const newBoard = createBoard(10, 10, 15);\n        setNonMineCount(10 * 10 - 15);\n        setMineLocation(newBoard.mineLocation);\n        setGrid(newBoard.board);\n    }\n\n    const restartGame = () => {\n        freshBoard();\n        setGameOver(false);\n    }\n\n    // On Right Click / Flag Cell\n    const updateFlag = (e, x, y) => {\n        // To not have a dropdown on right click\n        e.preventDefault();\n        // Deep copy of a state\n        let newGrid = JSON.parse(JSON.stringify(grid));\n        console.log(newGrid[x][y]);\n        newGrid[x][y].value = 'ðŸš©';\n        newGrid[x][y].revealed = true;\n        newGrid[x][y].flagged = true;\n        setGrid(newGrid);\n    };\n\n    // Reveal Cell\n    const revealCell = (x, y) => {\n        if(grid[x][y].revealed || gameOver){\n            return;\n        }\n        let newGrid = JSON.parse(JSON.stringify(grid));\n        if(newGrid[x][y].value === 'ðŸ’£'){\n            for(let i = 0; i < mineLocations.length; i++){\n                newGrid[mineLocations[i][0]][mineLocations[i][1]].revealed = true;\n            }\n            setGrid(newGrid);\n            setGameOver(true);\n        } \n        else{\n            let newRevealedBoard = revealed(newGrid, x, y, nonMineCount);\n            setGrid(newRevealedBoard.arr);\n            setNonMineCount(newRevealedBoard.newNonMinesCount);\n            if(newRevealedBoard.newNonMinesCount === 0){\n                setGameOver(true);\n            }\n        }\n        \n        \n    }\n\n    return(\n        <div className='boardWrapper'>\n            <Timer/>\n            <div className=\"board\">\n                {gameOver && <Modal restartGame = {restartGame}/>}\n                {\n                    grid.map((singleRow, index1) => {\n                        return (\n                            <div style = {{display: \"flex\"}} key = {index1}>\n                                {singleRow.map((singleBlock, index2) => {\n                                    return (\n                                        <Cell detail = {singleBlock} updateFlag = {updateFlag} revealCell = {revealCell} key = {index2}/>\n                                    );\n                                })}\n                            </div>\n                        );\n                    })\n                }\n            </div>\n            \n        </div>\n    ); \n\n    \n\n}\n\nexport default Board"]},"metadata":{},"sourceType":"module"}