{"ast":null,"code":"export default ((row, col, bombs) => {\n  let board = [];\n  let mineLocation = []; // Create a blank board\n\n  for (let x = 0; x < row; x++) {\n    let subCol = [];\n\n    for (let y = 0; y < col; y++) {\n      subCol.push({\n        value: 0,\n        revealed: false,\n        neighbors: [],\n        x: x,\n        y: y,\n        flagged: false\n      });\n    }\n\n    board.push(subCol);\n  }\n\n  let bombsCount = 0;\n\n  while (bombsCount < bombs) {\n    let x = randomNum(0, row - 1);\n    let y = randomNum(0, col - 1);\n\n    if (board[x][y].value === 0) {\n      board[x][y].value = \"X\";\n      mineLocation.push([x, y]);\n      bombsCount++;\n    }\n  } // Add Numbers\n\n\n  for (let roww = 0; roww < row; roww++) {\n    for (let coll = 0; coll < col; coll++) {\n      if (board[roww][coll].value === \"X\") continue;\n      if (roww > 0 && board[roww - 1][coll].value === \"X\") board[roww][coll].value++; // Top Right\n\n      if (roww > 0 && coll < col - 1 && board[roww - 1][coll - 1].value === \"X\") board[roww][coll].value++; // Right\n\n      if (coll < col - 1 && board[roww][coll + 1].value === \"X\") board[roww][coll].value++; // Bottom Right\n\n      if (roww < row - 1 && coll < col - 1 && board[roww + 1][coll + 1].value === \"X\") board[roww][coll].value++; // Bottom\n\n      if (roww < row - 1 && board[roww + 1][coll].value === \"X\") board[roww][coll].value++; // Bottom Left\n    }\n  }\n});","map":{"version":3,"sources":["/Users/anitalu/Desktop/web/minesweeper/src/util/createBoard.js"],"names":["row","col","bombs","board","mineLocation","x","subCol","y","push","value","revealed","neighbors","flagged","bombsCount","randomNum","roww","coll"],"mappings":"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","sourcesContent":["export default (row, col, bombs) => {\n    let board = [];\n    let mineLocation = [];\n\n    // Create a blank board\n    for(let x = 0; x < row; x++){\n        let subCol = [];\n        for(let y = 0; y < col; y++){\n            subCol.push({\n                value: 0,\n                revealed: false,\n                neighbors: [],\n                x: x,\n                y: y,\n                flagged: false,\n            });\n        }\n        board.push(subCol);\n    }\n\n    let bombsCount = 0;\n    while(bombsCount < bombs){\n        let x = randomNum(0, row - 1);\n        let y = randomNum(0, col - 1);\n\n        if(board[x][y].value === 0){\n            board[x][y].value = \"X\";\n            mineLocation.push([x, y]);\n            bombsCount++;\n        }\n    }\n\n    // Add Numbers\n    for(let roww = 0; roww < row; roww++){\n        for(let coll = 0; coll < col; coll++){\n            if (board[roww][coll].value === \"X\") continue;\n            if (roww > 0 && board[roww - 1][coll].value === \"X\") board[roww][coll].value++;\n            // Top Right\n            if (roww > 0 && coll < col - 1 && board[roww - 1][coll - 1].value === \"X\") board[roww][coll].value++;\n            // Right\n            if (coll < col - 1 && board[roww][coll + 1].value === \"X\") board[roww][coll].value++;\n            // Bottom Right\n            if (roww < row - 1 && coll < col - 1 && board[roww + 1][coll + 1].value === \"X\") board[roww][coll].value++;\n            // Bottom\n            if (roww < row - 1 && board[roww + 1][coll].value === \"X\") board[roww][coll].value++;\n            // Bottom Left\n            \n        }\n    }\n\n\n\n}"]},"metadata":{},"sourceType":"module"}